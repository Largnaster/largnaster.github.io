{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","imageList","width","height","App","useState","contador","setContador","chiste","setChiste","imagen","setImagen","classes","getChiste","a","fetch","response","json","content","console","log","value","getImagen","imagenes","Container","ButtonGroup","color","variant","aria-label","Button","onClick","className","ImageList","rowHeight","cols","map","src","ImageListItem","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE5CC,UAAW,CACTC,MAAO,OACPC,OAAQ,YAsGGC,MAlGf,WAAe,MAImBC,mBAAS,GAJ5B,mBAINC,EAJM,KAIIC,EAJJ,OAKeF,mBAAS,IALxB,mBAKNG,EALM,KAKEC,EALF,OAMeJ,mBAAS,IANxB,mBAMNK,EANM,KAMEC,EANF,KAQPC,EAAUvB,IAWVwB,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,2CADb,cACVC,EADU,gBAEMA,EAASC,OAFf,OAEVC,EAFU,OAGhBC,QAAQC,IAAIF,EAAQG,OACpBZ,EAAUS,EAAQG,OAJF,2CAAH,qDAaTC,EAAS,uCAAG,4BAAAR,EAAA,sEACOC,MAAM,sCADb,OACVC,EADU,OAEhBG,QAAQC,IAAIJ,EAAQ,KACpBL,GAAU,SAACY,GAAD,4BAAkBA,GAAlB,CAA4BP,EAAQ,SAH9B,2CAAH,qDAaf,OACE,eAACQ,EAAA,EAAD,WACE,gCACE,0CACA,eAACC,EAAA,EAAD,CAAaC,MAAM,UAAUC,QAAQ,YAAYC,aAAW,iCAA5D,UACE,cAACC,EAAA,EAAD,CAAQC,QAvCC,WACfvB,EAAYD,EAAW,IAsCjB,eAGA,cAACuB,EAAA,EAAD,CAAQC,QAvCA,WACVxB,EAAW,GACbC,EAAYD,EAAW,IAqCnB,eACA,cAACuB,EAAA,EAAD,CAAQC,QAAS,kBAAMvB,EAAY,IAAnC,sBAEF,4BAAID,OAEN,uBACA,uBACA,gCACE,yCACA,cAACuB,EAAA,EAAD,CAAQF,QAAQ,YAAYG,QAASjB,EAArC,oBACA,4BAAIL,OAEN,uBACA,uBACA,gCACE,6CACA,cAACqB,EAAA,EAAD,CAAQF,QAAQ,YAAYG,QAASR,EAArC,oBACA,uBACA,qBAAKS,UAAWnB,EAAQpB,KAAxB,SACE,cAACwC,EAAA,EAAD,CAAWC,UAAW,IAAKF,UAAWnB,EAAQX,UAAWiC,KAAM,EAA/D,SACGxB,EAAOyB,KAAI,SAACC,GAAD,OACV,cAACC,EAAA,EAAD,CAAyBH,KAAM,EAA/B,SACE,qBAAKE,IAAKA,EAAKE,IAAK,uBADFF,UAkB1B,8BCxGOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.653f8060.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { ButtonGroup } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ImageList from \"@material-ui/core/ImageList\"\nimport ImageListItem from \"@material-ui/core/ImageListItem\"\nimport \"./App.css\";\n\n// ESTILOS PARA LAS IMAGENES \nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  imageList: {\n    width: '100%',\n    height: 'auto'\n  }\n}))\n\nfunction App() {\n  // -- link a github: https://github.com/Largnaster/nice-example\n  // --SERIA UN PLUS UTILIZAR MATERIAL UI-- https://material-ui.com/\n  // DEFINICION DE VARIABLES\n  const [contador, setContador] = useState(0);\n  const [chiste, setChiste] = useState(\"\");\n  const [imagen, setImagen] = useState([]);\n  // estilos\n  const classes = useStyles();\n\n  // FUNCIONE\n  const aumentar = () => {\n    setContador(contador + 1);\n  };\n  const reducir = () => {\n    if (contador > 0) {\n      setContador(contador - 1);\n    }\n  };\n  const getChiste = async () => {\n    const response = await fetch(\"https://api.chucknorris.io/jokes/random\");\n    const content = await response.json();\n    console.log(content.value);\n    setChiste(content.value);\n  };\n  // const getChiste = () => {\n  //   fetch(\"https://api.chucknorris.io/jokes/random\")\n  //   .then(res => res.json())\n  //   .then((result) => {\n  //     console.log(result.value)\n  //   })\n  // }\n  const getImagen = async () => {\n    const response = await fetch(\"https://source.unsplash.com/random\");\n    console.log(response[\"url\"]);\n    setImagen((imagenes) => [...imagenes, response[\"url\"]]);\n\n    // fetch('https://source.unsplash.com/random')\n    // .then(res => res.json())\n    // .then((content) => {\n    //   console.log(content)\n    // })\n  };\n\n  // RENDER\n  return (\n    <Container>\n      <div>\n        <h1>Contador</h1>\n        <ButtonGroup color=\"primary\" variant=\"contained\" aria-label=\"contained primary button group\">\n          <Button onClick={aumentar}>\n            +\n          </Button>\n          <Button onClick={reducir}>-</Button>\n          <Button onClick={() => setContador(0)}>reset</Button>\n        </ButtonGroup>\n        <p>{contador}</p>\n      </div>\n      <br />\n      <hr />\n      <div>\n        <h1>Chistes</h1>\n        <Button variant=\"contained\" onClick={getChiste}>Chiste</Button>\n        <p>{chiste}</p>\n      </div>\n      <br />\n      <hr />\n      <div>\n        <h1>Im√°genes</h1>\n        <Button variant=\"contained\" onClick={getImagen}>Imagen</Button>\n        <br />\n        <div className={classes.root}>\n          <ImageList rowHeight={300} className={classes.imageList} cols={3}>\n            {imagen.map((src) => (\n              <ImageListItem key={src} cols={1}>\n                <img src={src} alt={\"Una imagen simple\"} />\n              </ImageListItem>\n            ))}\n          </ImageList>\n        </div>\n        {/* {imagen.map((src) => {\n          return (\n            <img\n              id={\"ima\"}\n              key={src}\n              src={src}\n              alt={\"Something or someone\"}\n              width=\"400\"\n              height=\"400\"\n            ></img>\n          );\n        })} */}\n        <br/>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}